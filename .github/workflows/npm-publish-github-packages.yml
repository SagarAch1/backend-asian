name: Test and Deploy

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: npm install and test
        run: |
          npm install
        env:
          CI: true

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Debug SSH Connection
        run: |
          echo "Attempting to connect to ${{ secrets.SSH_HOST }} on port ${{ secrets.SSH_PORT }}"
          nc -zv ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }}
        continue-on-error: true

      - name: SSH and Deploy to Asian Api
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: '120s'  # Increased timeout
          command_timeout: '20m'  # Increased command timeout
          debug: true  # Enable debug mode
          script: |
            set -ex  # Added -x for debug output
            echo "Starting deployment..."
            
            # Check if directory exists
            if [ ! -d "~/asian.edu.np/backend-asian" ]; then
              echo "Directory does not exist!"
              exit 1
            fi
            
            cd ~/asian.edu.np/backend-asian || exit 1
            
            # Git operations with error handling
            echo "Checking git status..."
            if [[ -n $(git status -s) ]]; then
              git config --global user.email "github-actions@github.com"
              git config --global user.name "GitHub Actions"
              git add .
              git commit -m "local changes" || true
            fi
            
            echo "Pulling latest changes..."
            git pull origin master || {
              echo "Git pull failed!"
              exit 1
            }
            
            # Package installation with error handling
            echo "Installing dependencies..."
            if command -v yarn &> /dev/null; then
              echo "Using Yarn to install dependencies"
              yarn install || {
                echo "Yarn install failed!"
                exit 1
              }
            else
              echo "Using NPM to install dependencies"
              npm install || {
                echo "NPM install failed!"
                exit 1
              }
            fi
            
            # PM2 restart with better error handling
            echo "Restarting PM2 process..."
            pm2 describe Api > /dev/null
            if [ $? -eq 0 ]; then
              pm2 restart Api
            else
              pm2 start yarn --name "Api" -- start
            fi
            
            echo "Deployment completed successfully."
